// SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company and IronCore contributors
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by MockGen. DO NOT EDIT.
// Source: backupentry.go
//
// Generated by this command:
//
//	mockgen -copyright_file ../../../hack/license-header.txt -package backupentry -destination=mock_backupentry.go -source backupentry.go S3ClientGetter,S3ObjectLister
//

// Package backupentry is a generated GoMock package.
package backupentry

import (
	reflect "reflect"

	aws "github.com/aws/aws-sdk-go/aws"
	s3 "github.com/aws/aws-sdk-go/service/s3"
	gomock "go.uber.org/mock/gomock"
)

// Mocks3ObjectLister is a mock of s3ObjectLister interface.
type Mocks3ObjectLister struct {
	ctrl     *gomock.Controller
	recorder *Mocks3ObjectListerMockRecorder
}

// Mocks3ObjectListerMockRecorder is the mock recorder for Mocks3ObjectLister.
type Mocks3ObjectListerMockRecorder struct {
	mock *Mocks3ObjectLister
}

// NewMocks3ObjectLister creates a new mock instance.
func NewMocks3ObjectLister(ctrl *gomock.Controller) *Mocks3ObjectLister {
	mock := &Mocks3ObjectLister{ctrl: ctrl}
	mock.recorder = &Mocks3ObjectListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocks3ObjectLister) EXPECT() *Mocks3ObjectListerMockRecorder {
	return m.recorder
}

// ListObjectsPages mocks base method.
func (m *Mocks3ObjectLister) ListObjectsPages(ctx aws.Context, s3Client *s3.S3, input *s3.ListObjectsInput, bucketName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListObjectsPages", ctx, s3Client, input, bucketName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListObjectsPages indicates an expected call of ListObjectsPages.
func (mr *Mocks3ObjectListerMockRecorder) ListObjectsPages(ctx, s3Client, input, bucketName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectsPages", reflect.TypeOf((*Mocks3ObjectLister)(nil).ListObjectsPages), ctx, s3Client, input, bucketName)
}
